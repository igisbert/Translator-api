---
import { allLanguages } from "../utils/constants.js";
import { saveSelectedLanguages } from "../utils/languageSettings.js";
import Close from "../assets/close.svg";
---

<div id="language-config-panel" class="language-config-panel">
  <h2>Configuraci칩n de Idiomas</h2>
  <button id="close-panel-button" class="close-panel-button"
    ><Close width={36} height={36} /></button
  >
  <div class="language-list">
    {
      allLanguages.map((lang) => (
        /* <label>
          <input type="checkbox" value={lang.value} />
          {lang.label}
        </label> */
        <label class="checkbox-container">
          <input type="checkbox" value={lang.value} />
          <div class="checkmark" />
          {lang.label}
        </label>
      ))
    }
  </div>
  <button id="save-languages-button" class="save-languages-button"
    >Guardar</button
  >
</div>

<style>
  .language-config-panel {
    position: fixed;
    top: 0;
    left: -500px; /* Oculto por defecto */
    width: 500px;
    height: 100%;
    background-color: var(--background-color);
    box-shadow: 8px 0px 8px rgb(0 0 0 /35%);
    transition: left 0.3s ease-in-out;
    z-index: 1003;
    padding: 1.5rem;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
  }

  @media (max-width: 768px) {
    .language-config-panel {
      width: 100%;
      left: -100%;
    }
  }

  .language-config-panel.open {
    left: 0;
  }

  .language-config-panel h2 {
    margin-top: 0;
    color: var(--text-color);
  }

  .close-panel-button {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: var(--text-color);
  }

  .language-list {
    flex-grow: 1;
    overflow-y: auto;
    margin-top: 1rem;
    padding-right: 0.5rem; /* Para el scrollbar */
  }

  /* Estilos para la scrollbar */
  .language-list::-webkit-scrollbar {
    width: 10px; /* Ancho de la scrollbar vertical */
  }

  .language-list::-webkit-scrollbar-track {
    background: transparent; /* Fondo transparente */
  }

  .language-list::-webkit-scrollbar-thumb {
    background-color: rgba(
      255,
      255,
      255,
      0.1
    ); /* Color sutil para el "pulgar" */
    border-radius: 10px; /* Bordes redondeados */
    border: 2px solid transparent; /* Borde transparente para que el pulgar sea m치s delgado */
    background-clip: padding-box; /* Asegura que el borde no afecte el color del pulgar */
  }

  .language-list::-webkit-scrollbar-thumb:hover {
    background-color: rgba(
      255,
      255,
      255,
      0.2
    ); /* Un poco m치s visible al pasar el rat칩n */
    cursor: pointer; /* Cursor de puntero */
  }

  .save-languages-button {
    background-color: var(--primary-color);
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: var(--border-radius);
    font-size: 1rem;
    cursor: pointer;
    margin-top: 1rem;
    /* align-self: flex-end; */
  }

  /* gemini */

  /* From Uiverse.io by bociKond */
  /* Hide the default checkbox */
  .checkbox-container input {
    position: absolute;
    opacity: 0;
    cursor: pointer;
    height: 0;
    width: 0;
  }

  .checkbox-container {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    position: relative;
    cursor: pointer;
    font-size: 1.5rem;
    user-select: none;
    margin-bottom: 0.75rem;
  }

  /* Create a custom checkbox */
  .checkmark {
    --clr: var(--primary-color);
    position: relative;
    top: 0;
    left: 0;
    height: 1.3em;
    width: 1.3em;
    background-color: #ccc;
    border-radius: 50%;
    transition: 300ms;
  }

  /* When the checkbox is checked, add a blue background */
  .checkbox-container input:checked ~ .checkmark {
    background-color: var(--clr);
    border-radius: 0.5rem;
  }

  /* Create the checkmark/indicator (hidden when not checked) */
  .checkmark:after {
    content: "";
    position: absolute;
    display: none;
  }

  /* Show the checkmark when checked */
  .checkbox-container input:checked ~ .checkmark:after {
    display: block;
  }
</style>

<script>
  import {
    saveSelectedLanguages,
    getSelectedLanguages,
  } from "../utils/languageSettings.js";

  document.addEventListener("DOMContentLoaded", () => {
    const panel = document.getElementById("language-config-panel");
    const closeButton = document.getElementById("close-panel-button");
    const openButton = document.getElementById("open-panel-button");
    const saveButton = document.getElementById("save-languages-button");

    if (panel && closeButton && openButton && saveButton) {
      openButton.addEventListener("click", () => {
        panel.classList.add("open");
        // Load selected languages when panel opens
        const selected = getSelectedLanguages();
        const checkboxes = panel.querySelectorAll('input[type="checkbox"]');
        checkboxes.forEach((checkbox) => {
          (checkbox as HTMLInputElement).checked = selected.includes(
            (checkbox as HTMLInputElement).value
          );
        });
      });

      closeButton.addEventListener("click", () => {
        panel.classList.remove("open");
      });

      saveButton.addEventListener("click", () => {
        const checkboxes = panel.querySelectorAll('input[type="checkbox"]');
        const selected = Array.from(checkboxes)
          .filter((checkbox) => (checkbox as HTMLInputElement).checked)
          .map((checkbox) => (checkbox as HTMLInputElement).value);

        saveSelectedLanguages(selected);
        panel.classList.remove("open");
        document.dispatchEvent(new CustomEvent("languages-updated"));
      });
    }
  });
</script>
